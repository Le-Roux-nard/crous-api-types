{"version":3,"file":"ResourceManager.js","sourceRoot":"","sources":["../src/ResourceManager.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,OAAO,OAAgB,eAAe;IAC5C,GAAG,CAAC,EAAmB;QACtB,OAAO,IAAI,OAAO,CAAgB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrD,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;gBAC7B,IAAI,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE;oBAClB,OAAO,CAAC,IAAI,CAAC,CAAC;oBACd,OAAO;iBACP;aACD;YACD,MAAM,CAAC,8BAA8B,EAAE,GAAG,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,EAAmB;QAC7B,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,EAAE;YACnC,IAAI,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAClG,IAAI,YAAY,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;YACpE,IAAI,YAAY,IAAI,CAAC,CAAC,EAAE;gBACvB,IAAI,SAAS,GAAG,aAAa,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzD,SAAS,IAAI,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aAC9C;YACD,OAAO,CAAC,aAAa,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACJ,CAAC;IAKD,OAAO,CAAC,KAAY;QACnB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACzB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACf;IACF,CAAC;IAED,MAAM,CAAC,EAAmB;QACzB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;QACvD,IAAI,GAAG,IAAI,CAAC,CAAC,EAAE;YACd,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;SACzB;IACF,CAAC;IAED,SAAS;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,KAAK,EAAK,CAAC;IAC5B,CAAC;IAED,IAAI,GAAQ,IAAI,KAAK,EAAK,CAAC;IAE3B,MAAM;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IAC/C,CAAC;CACD","sourcesContent":["import { CrousData } from \"./CrousData.js\";\r\n\r\nexport default abstract class ResourceManager<T extends CrousData> {\r\n\tget(id: string | number): Promise<T | undefined> {\r\n\t\treturn new Promise<T | undefined>((resolve, reject) => {\r\n\t\t\tfor (const item of this.list) {\r\n\t\t\t\tif (item.id == id) {\r\n\t\t\t\t\tresolve(item);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treject(`Resource not found for id '${id}'`);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t *  Search every item in the list for a partial match of the id.\r\n\t * @param id\r\n\t * @returns A list of items that match the id. If an exact match is found it will be the first item of the list.\r\n\t */\r\n\tsearchById(id: string | number): Promise<T[]> {\r\n\t\treturn new Promise<T[]>((resolve) => {\r\n\t\t\tlet possibleItems = this.list.filter((item) => item.id == id || item.id?.includes(id.toString()));\r\n\t\t\tlet exactItemIdx = possibleItems.findIndex((item) => item.id == id);\r\n\t\t\tif (exactItemIdx != -1) {\r\n\t\t\t\tlet exactItem = possibleItems.splice(exactItemIdx, 1)[0];\r\n\t\t\t\texactItem && possibleItems.unshift(exactItem);\r\n\t\t\t}\r\n\t\t\tresolve(possibleItems);\r\n\t\t});\r\n\t}\r\n\tabstract searchByName(name: string): Promise<T[]>;\r\n\t\r\n\tabstract add(item: any): void;\r\n\r\n\taddSome(items: any[]): void {\r\n\t\tfor (const item of items) {\r\n\t\t\tthis.add(item);\r\n\t\t}\r\n\t}\r\n\t\r\n\tremove(id: string | number): void {\r\n\t\tlet idx = this.list.findIndex((item) => item.id == id);\r\n\t\tif (idx != -1) {\r\n\t\t\tthis.list.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tremoveAll(): void {\r\n\t\tthis.list = new Array<T>();\r\n\t}\r\n\r\n\tlist: T[] = new Array<T>();\r\n\r\n\ttoJSON(): any[] {\r\n\t\treturn this.list.map((item) => item.toJSON());\r\n\t}\r\n}\r\n"]}